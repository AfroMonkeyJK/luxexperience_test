import { generate } from 'multiple-cucumber-html-reporter';
import path from 'path';
import { fileURLToPath } from 'url';
import fs from 'fs';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);
/**
 * Generate HTML report from Cucumber JSON results
 */
export function generateReport() {
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  console.log('📊 Test Report Generator');
  console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  const environment = process.env.ENV_VARS || 'dev';
  const jsonDir = path.join(__dirname, '../reports/json/');
  const htmlDir = path.join(__dirname, '../reports/html/');
  // Validate JSON directory and files exist
  try {
    if (!fs.existsSync(jsonDir)) {
      console.log(`📁 Creating JSON directory: ${jsonDir}`);
      fs.mkdirSync(jsonDir, { recursive: true });
    }

    const jsonFiles = fs.readdirSync(jsonDir)
      .filter(file => file.endsWith('.json'))
      .filter(file => {
        const filePath = path.join(jsonDir, file);
        const stats = fs.statSync(filePath);
        return stats.size > 0; // Skip empty files
      })
      .sort((a, b) => {
        // Sort by modification time, newest first
        const pathA = path.join(jsonDir, a);
        const pathB = path.join(jsonDir, b);
        return fs.statSync(pathB).mtime - fs.statSync(pathA).mtime;
      });

    if (jsonFiles.length === 0) {
      throw new Error(`No valid JSON files found in ${jsonDir}. Make sure tests have run successfully.`);
    }
    console.log(`📄 Found ${jsonFiles.length} valid JSON report file(s):`, jsonFiles);
    // ✅ Use the most recent JSON file name to determine report structure
    const latestJsonFile = jsonFiles[0];
    console.log(`📊 Processing latest report: ${latestJsonFile}`);
    // ✅ Extract report name from JSON filename (remove .json extension)
    const reportNameFromFile = latestJsonFile.replace('.json', '');
    // ✅ Parse the filename to extract components
    const filenameParts = reportNameFromFile.match(/E2E-Report-([A-Z]+)(_[^-]+)?-(\d{2}-\d{2}-\d{4})_(\d{2}-\d{2}-\d{2})/);
    let reportDisplayName, tags, dateString, timeString;
    if (filenameParts) {
      const [, env, tagSuffix, date, time] = filenameParts;
      reportDisplayName = `E2E-Report-${env}${tagSuffix || ''}-${date}`;
      tags = tagSuffix ? tagSuffix.replace('_', '').replace(/\s+/g, ' ') : 'All Tests';
      dateString = date;
      timeString = time;
    } else {
      // Fallback to current date/time
      const now = new Date();
      dateString = now.toLocaleDateString('en-GB').replace(/\//g, '-');
      timeString = now.toLocaleTimeString('en-GB', { hour12: false }).replace(/:/g, '-');
      reportDisplayName = `E2E-Report-${environment.toUpperCase()}-${dateString}`;
      tags = 'All Tests';
    }
    console.log(`🏷️  Report Name: ${reportDisplayName}`);
    console.log(`🎯 Tags: ${tags}`);
    console.log(`🌍 Environment: ${environment.toUpperCase()}`);
    // ✅ Create HTML directory using the same naming convention
    const customHtmlDir = path.join(htmlDir, reportNameFromFile);
    const reportOptions = {
      jsonDir: jsonDir,
      reportPath: customHtmlDir,
      metadata: {
        browser: {
          name: 'chrome',
          version: 'latest'
        },
        device: 'Local test machine',
        platform: {
          name: process.platform,
          version: process.version
        }
      },
      customData: {
        title: `LuxEperience Test Automation Report - ${environment.toUpperCase()}`,
        data: [
          { label: 'Project', value: 'E2E Testing' },
          { label: 'Release', value: '1.0.0' },
          { label: 'Test Suite', value: tags },
          { label: 'Environment', value: environment.toUpperCase() },
          { label: 'Execution Date', value: dateString.replace(/-/g, '/') },
          { label: 'Execution Time', value: timeString.replace(/-/g, ':') },
          { label: 'JSON Source', value: latestJsonFile }
        ]
      },
      displayDuration: true,
      displayReportTime: true,
      useCDN: true,
      pageTitle: `${reportDisplayName} - Automation`,
      reportName: reportDisplayName,
      pageFooter: `<div><p>Generated by Andreu Martinez Test Automation Framework - LuxExperience | ${reportNameFromFile}</p></div>`,
      hideMetadata: false,
      customMetadata: true
    };
    console.log('📊 Generating HTML report...');
    generate(reportOptions);
    console.log('✅ HTML report generated successfully!');
    console.log(`📁 Report location: ${customHtmlDir}`);
    console.log(`🌐 Open report: file://${path.resolve(customHtmlDir, 'index.html')}`);
    console.log(`🏷️ Report identifier: ${reportNameFromFile}`);
    console.log('━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━');
  } catch (error) {
    console.error(`❌ Failed to generate report: ${error.message}`);
    if (process.env.CI === 'true') {
      console.log('🔄 Continuing in CI mode...');
      return null;
    }
    throw error;
  }
}
// Run report generation if called directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateReport();
}
